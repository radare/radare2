#compdef r2
local context state state_descr line
local -i ret=1

r2_qc() {
  r2 -qc $1 --
}

_r2() {
  local -a options=(
  # '-=[perform !=! command to run all commands remotely'
  '-0[print \x00 after init and every command]'
  '-a+[set asm.arch]: :->arch'
  "-A[run 'aaa' command to analyze all referenced code]"
  '-b+[set asm.bits]:bits'
  '-B+[set base address for PIE binaries]:baddr'
  '-c+[execute radare command]:cmd'
  '-C[file is host:port (alias for -c+=http://%s/cmd/)]'
  "-d[debug the executable 'file' or running process 'pid']"
  '-D+[enable debug mode (e cfg.debug=true)]'
  '-e+[evaluate config var]: :->config'
  '-f[block size = file size]'
  '-F=[force to use that rbin plugin]:binplug'
  '(-h, -hh)'{-h,-hh}'[show help message, -hh for long]'
  '-H[display variable]'
  '-i+[run script file]: :_files'
  '-I+[run script file before the file is opened]: :_files'
  '-k+[set asm.os (linux, macos, w32, netbsd, ...)]: :->os'
  '-l+[load plugin file]:lib'
  '-L[list supported IO plugins]'
  '-m+[map file at given address (loadaddr)]:addr'
  '-M[do not demangle symbol names]'
  '(-n -nn)'{-n,-nn}'[do not load RBin info (-nn only load bin structures)]'
  '-N[do not load user settings and scripts]'
  '(-q -Q)'-q'[quiet mode (no prompt) and quit after -i]'
  '(-q -Q)'-Q'[quiet mode (no prompt) and quit faster (quietLeak=true)]'
  '-p+[use project, list if no arg, load if no file]: :->project'
  '-P+[apply rapatch file and quit]: :_files'
  '-R+[specify rarun2 profile to load (same as -e dbg.profile=X)]:rarun2'
  '-s+[initial seek]:addr'
  '-S[start r2 in sandbox mode]'
  '-t[load rabin2 info in thread]'
  '-u[set bin.filter=false to get raw sym/sec/cls names]'
  '(-v -V)'{-v,-V}'[show radare2 version (-V show lib versions)]'
  '-w[open file in write mode]'
  '-X+[specify custom rarun2 directive]:rr2rule'
  '(-z -zz)'{-z,-zz}'[do not load strings or load them even in raw]'
  )

  _arguments -S -s : $options '1:file:_files' && ret=0

  case $state in
    arch)
      local -a sub=(${(f)"$(r2_qc 'e asm.arch=?~[2,4-99]' | sed -r 's/ (.*)/[\1]/')"})
      _values 'arch' $sub && ret=0
      ;;
    config)
      local -a sub=(${(f)"$(r2_qc 'e??' | sed -E -e 's/\[/\\[/g' -e 's/]/\\]/g' -e 's/\s*([^:]+): (.*)/\1[\2]:value:/')"})
      _values 'config var' $sub && ret=0
      ;;
    os)
      _values 'arch' $(r2_qc 'e asm.os=?') && ret=0
      ;;
    project)
      _values 'project' $(r2 -p) && ret=0
      ;;
  esac
  return ret
}

_r2 "$@"

# Local Variables:
# mode: shell-script
# coding: utf-8-unix
# indent-tabs-mode: nil
# sh-indentation: 2
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 sts=2 et
