#!/bin/sh
for a in . .. ../.. ../../.. ; do [ -e $a/tests.sh ] && . $a/tests.sh; done

test_vector() {
NAME="${1}: [${2}]"
FILE=malloc://32
if [ "${5}" = "br" ]; then
	BROKEN=1
	if [ -n "${TRAVIS}" ]; then
		unset BROKEN
		return
	fi
fi
CMDS='
e asm.arch='${1}'
e asm.bits=32
wx '${3}'
pi 1
'
EXPECT="${4}
"
run_test
}

PLUGIN=x86

test_vector "${PLUGIN}" "OUT" e784 "out 0x84, eax"
test_vector "${PLUGIN}" "IN" e58c "in eax, 0x8c"
test_vector "${PLUGIN}" "CWDE" 98 "cwde"
test_vector "${PLUGIN}" "CBW" 6698 "cbw"
test_vector "${PLUGIN}" "CDQ" 99 "cdq"
test_vector "${PLUGIN}" "CWD" 6699 "cwd"
test_vector "${PLUGIN}" "CMC" F5 "cmc"
test_vector "${PLUGIN}" "STC" F9 "stc"
test_vector "${PLUGIN}" "CLC" F8 "clc"
test_vector "${PLUGIN}" "CLI" FA "cli"
test_vector "${PLUGIN}" "STI" FB "sti"
test_vector "${PLUGIN}" "CLD" FC "cld"
test_vector "${PLUGIN}" "STD" FD "std"
test_vector "${PLUGIN}" "SALC" D6 "salc"
test_vector "${PLUGIN}" "XLATB" D7 "xlatb"
test_vector "${PLUGIN}" "LEAVE" C9 "leave"
test_vector "${PLUGIN}" "INT1" F1 "int1"
test_vector "${PLUGIN}" "INT 1" CD01 "int 1"
test_vector "${PLUGIN}" "INT3" CC "int3"
test_vector "${PLUGIN}" "INT 3" CD03 "int 3"
test_vector "${PLUGIN}" "INTO" CE "into"
test_vector "${PLUGIN}" "IRETD" CF "iretd"
test_vector "${PLUGIN}" "IRET" 66CF "iret"
test_vector "${PLUGIN}" "RET" C3 "ret"
test_vector "${PLUGIN}" "RETF 0" CA00 "retf 0"
test_vector "${PLUGIN}" "RETF" CB "retf"
test_vector "${PLUGIN}" "HLT" F4 "hlt"
test_vector "${PLUGIN}" "LAHF" 9F "lahf"
test_vector "${PLUGIN}" "SAHF" 9E "sahf"
test_vector "${PLUGIN}" "PUSHFD" 9C "pushfd"
test_vector "${PLUGIN}" "POPFD" 9D "popfd"
test_vector "${PLUGIN}" "PUSHAL" 60 "pushal" # http://www.fermimn.gov.it/linux/quarta/x86/pusha.htm
test_vector "${PLUGIN}" "POPAl" 61 "popal" # http://www.fermimn.gov.it/linux/quarta/x86/popa.htm
test_vector "${PLUGIN}" "POPAW" 6661 "popaw"
test_vector "${PLUGIN}" "DAA" 27 "daa"
test_vector "${PLUGIN}" "AAA" 37 "aaa"
test_vector "${PLUGIN}" "DAS" 2F "das"
test_vector "${PLUGIN}" "AAS" 3F "aas"
test_vector "${PLUGIN}" "AAM" d40a "aam" # This instruction doesn't seem to need arguments
test_vector "${PLUGIN}" "AAD" d50a "aad" # This instruction doesn't seem to need arguments
test_vector "${PLUGIN}" "ADX" d4 "adx" "br"
test_vector "${PLUGIN}" "AMX" d5 "amx" "br"
test_vector "${PLUGIN}" "PUSH EAX" 50 "push eax"
test_vector "${PLUGIN}" "PUSH ECX" 51 "push ecx"
test_vector "${PLUGIN}" "PUSH EDX" 52 "push edx"
test_vector "${PLUGIN}" "PUSH EBX" 53 "push ebx"
test_vector "${PLUGIN}" "PUSH ESP" 54 "push esp"
test_vector "${PLUGIN}" "PUSH EBP" 55 "push ebp"
test_vector "${PLUGIN}" "PUSH ESI" 56 "push esi"
test_vector "${PLUGIN}" "PUSH EDI" 57 "push edi"
test_vector "${PLUGIN}" "POP EAX" 58 "pop eax"
test_vector "${PLUGIN}" "POP ECX" 59 "pop ecx"
test_vector "${PLUGIN}" "POP EDX" 5A "pop edx"
test_vector "${PLUGIN}" "POP EBX" 5B "pop ebx"
test_vector "${PLUGIN}" "POP ESP" 5C "pop esp"
test_vector "${PLUGIN}" "POP EBP" 5D "pop ebp"
test_vector "${PLUGIN}" "POP ESI" 5E "pop esi"
test_vector "${PLUGIN}" "POP EDI" 5F "pop edi"
test_vector "${PLUGIN}" "PUSH DWORD [EAX]" ff30 "push dword [eax]"
test_vector "${PLUGIN}" "POP DWORD [EAX]" 8f00 "pop dword [eax]"
test_vector "${PLUGIN}" "PUSH ES" 06 "push es"
test_vector "${PLUGIN}" "PUSH CS" 0E "push cs"
test_vector "${PLUGIN}" "PUSH SS" 16 "push ss"
test_vector "${PLUGIN}" "PUSH DS" 1E "push ds"
test_vector "${PLUGIN}" "POP ES" 07 "pop es"
test_vector "${PLUGIN}" "POP SS" 17 "pop ss"
test_vector "${PLUGIN}" "POP DS" 1F "pop ds"
test_vector "${PLUGIN}" "PUSH 0" 6a00 "push 0"
test_vector "${PLUGIN}" "PUSH FS" 0fa0 "push fs"
test_vector "${PLUGIN}" "POP FS" 0fa1 "pop fs"
test_vector "${PLUGIN}" "PUSH GS" 0fa8 "push gs"
test_vector "${PLUGIN}" "POP GS" 0fa9 "pop gs"
test_vector "${PLUGIN}" "INC EAX" 40 "inc eax"
test_vector "${PLUGIN}" "INC ECX" 41 "inc ecx"
test_vector "${PLUGIN}" "INC EDX" 42 "inc edx"
test_vector "${PLUGIN}" "INC EBX" 43 "inc ebx"
test_vector "${PLUGIN}" "INC ESP" 44 "inc esp"
test_vector "${PLUGIN}" "INC EBP" 45 "inc ebp"
test_vector "${PLUGIN}" "INC ESI" 46 "inc esi"
test_vector "${PLUGIN}" "INC EDI" 47 "inc edi"
test_vector "${PLUGIN}" "DEC EAX" 48 "dec eax"
test_vector "${PLUGIN}" "DEC ECX" 49 "dec ecx"
test_vector "${PLUGIN}" "DEC EDX" 4a "dec edx"
test_vector "${PLUGIN}" "DEC EBX" 4b "dec ebx"
test_vector "${PLUGIN}" "DEC ESP" 4c "dec esp"
test_vector "${PLUGIN}" "DEC EBP" 4d "dec ebp"
test_vector "${PLUGIN}" "DEC ESI" 4e "dec esi"
test_vector "${PLUGIN}" "DEC EDI" 4f "dec edi"
test_vector "${PLUGIN}" "INC BYTE [EAX]" fe00 "inc byte [eax]"
test_vector "${PLUGIN}" "INC DWORD [EAX]" ff00 "inc dword [eax]"
test_vector "${PLUGIN}" "DEC BYTE [EAX]" fe08 "dec byte [eax]"
test_vector "${PLUGIN}" "DEC DWORD [EAX]" ff08 "dec dword [eax]"
test_vector "${PLUGIN}" "SLDT [EAX]" 0f0000 "sldt word [eax]"
test_vector "${PLUGIN}" "STR [EAX]" 0f0008 "str word [eax]"
test_vector "${PLUGIN}" "LLDT [EAX]" 0f0010 "lldt word [eax]"
test_vector "${PLUGIN}" "LLDT AX" 0f00d0 "lldt ax"
test_vector "${PLUGIN}" "LTR [EAX]" 0f0018 "ltr word [eax]"
test_vector "${PLUGIN}" "LTR AX" 0f00d8 "ltr ax"
test_vector "${PLUGIN}" "VERR [EAX]" 0f0020 "verr word [eax]"
test_vector "${PLUGIN}" "VERR AX" 0f00e0 "verr ax"
test_vector "${PLUGIN}" "VERW [EAX]" 0f0028 "verw word [eax]"
test_vector "${PLUGIN}" "VERW AX" 0f00e8 "verw ax"
test_vector "${PLUGIN}" "SGDT [EAX]" 0f0100 "sgdt [eax]"
test_vector "${PLUGIN}" "SIDT [EAX]" 0f0108 "sidt [eax]"
test_vector "${PLUGIN}" "LGDT [EAX]" 0f0110 "lgdt [eax]"
test_vector "${PLUGIN}" "LIDT [EAX]" 0f0118 "lidt [eax]"
test_vector "${PLUGIN}" "SMSW [EAX]" 0f0120 "smsw word [eax]"
test_vector "${PLUGIN}" "LMSW [EAX]" 0f0130 "lmsw word [eax]"
test_vector "${PLUGIN}" "INVLPG BYTE [EAX]" 0f0138 "invlpg byte [eax]"
test_vector "${PLUGIN}" "MOV AL,0" B000 "mov al, 0"
test_vector "${PLUGIN}" "MOV CL,0" B100 "mov cl, 0"
test_vector "${PLUGIN}" "MOV DL,0" B200 "mov dl, 0"
test_vector "${PLUGIN}" "MOV BL,0" B300 "mov bl, 0"
test_vector "${PLUGIN}" "MOV AH,0" B400 "mov ah, 0"
test_vector "${PLUGIN}" "MOV CH,0" B500 "mov ch, 0"
test_vector "${PLUGIN}" "MOV DH,0" B600 "mov dh, 0"
test_vector "${PLUGIN}" "MOV BH,0" B700 "mov bh, 0"
test_vector "${PLUGIN}" "TEST AL,0" A8 "test al, 0"
test_vector "${PLUGIN}" "IN AL,0" E4 "in al, 0"
test_vector "${PLUGIN}" "IN EAX,0" E5 "in eax, 0"
test_vector "${PLUGIN}" "IN AL,DX" ec "in al, dx"
test_vector "${PLUGIN}" "IN EAX,DX" ed "in eax, dx"
test_vector "${PLUGIN}" "OUT 0, AL" E600 "out 0, al"
test_vector "${PLUGIN}" "OUT 0, EAX" E700 "out 0, eax"
test_vector "${PLUGIN}" "OUT DX, AL" ee "out dx, al"
test_vector "${PLUGIN}" "OUT DX, EAX" ef "out dx, eax"
test_vector "${PLUGIN}" "CPUID" 0fa2 "cpuid"
test_vector "${PLUGIN}" "PUSHFS" 0fa0 "push fs"
test_vector "${PLUGIN}" "POP FS" 0fa1 "pop fs"
test_vector "${PLUGIN}" "PUSH GS" 0fa8 "push gs"
test_vector "${PLUGIN}" "POP GS" 0fa9 "pop gs"
test_vector "${PLUGIN}" "INVD" 0f08 "invd"
test_vector "${PLUGIN}" "WBINVD" 0f09 "wbinvd"
test_vector "${PLUGIN}" "VMCALL" 0f01c1 "vmcall"
test_vector "${PLUGIN}" "VMLAUNCH" 0f01c2 "vmlaunch"
test_vector "${PLUGIN}" "VMRESUME" 0f01c3 "vmresume"
test_vector "${PLUGIN}" "VMXOFF" 0f01c4 "vmxoff"
test_vector "${PLUGIN}" "MONITOR" 0f01c8 "monitor"
test_vector "${PLUGIN}" "MWAIT" 0f01c9 "mwait"
test_vector "${PLUGIN}" "XGETBV" 0f01d0 "xgetbv"
test_vector "${PLUGIN}" "XSETBV" 0f01d1 "xsetbv"
test_vector "${PLUGIN}" "VMRUN" 0f01d8 "vmrun" "br" # This instruction doesn't seem to need arguments
test_vector "${PLUGIN}" "VMMCALL" 0f01d9 "vmmcall"
test_vector "${PLUGIN}" "VMLOAD" 0f01da "vmload" "br" # This instruction doesn't seem to need arguments
test_vector "${PLUGIN}" "VMSAVE" 0f01db "vmsave" "br" # This instruction doesn't seem to need arguments
test_vector "${PLUGIN}" "STGI" 0f01dc "stgi"
test_vector "${PLUGIN}" "CLGI" 0f01dd "clgi"
test_vector "${PLUGIN}" "SKINIT" 0f01de "skinit" "br" # This instruction doesn't seem to need arguments
test_vector "${PLUGIN}" "INVLPGA" 0f01df "invlpga" "br" # This instruction doesn't seem to need arguments
test_vector "${PLUGIN}" "PAUSE" f390 "pause"
test_vector "${PLUGIN}" "RDTSCP" 0f01f9 "rdtscp"
test_vector "${PLUGIN}" "LAR EAX, WORD [EAX]" 0f02 "lar eax, word [eax]"
test_vector "${PLUGIN}" "LSL EAX, DWORD [EAX]" 0f03 "lsl eax, dword [eax]"
test_vector "${PLUGIN}" "CLTS" 0f06 "clts"
test_vector "${PLUGIN}" "SYSRET" 0f07 "sysret"
test_vector "${PLUGIN}" "EMMS" 0f77 "emms"
test_vector "${PLUGIN}" "FEMMS" 0f0e "femms"
test_vector "${PLUGIN}" "CPUID" 0fa2 "cpuid"
test_vector "${PLUGIN}" "RSM" 0faa "rsm"
test_vector "${PLUGIN}" "UD2" 0f0b "ud2"
test_vector "${PLUGIN}" "GETSEC" 0f37 "getsec"
test_vector "${PLUGIN}" "MOV EAX, CR0" 0f20 "mov eax, cr0"
test_vector "${PLUGIN}" "MOV EAX, DR0" 0f21 "mov eax, dr0"
test_vector "${PLUGIN}" "MOV CR0, EAX" 0f22 "mov cr0, eax"
test_vector "${PLUGIN}" "MOV DR0, EAX" 0f23 "mov dr0, eax"
test_vector "${PLUGIN}" "JO 2" 7000 "jo 2"
test_vector "${PLUGIN}" "JNO 2" 7100 "jno 2"
test_vector "${PLUGIN}" "JB 2" 7200 "jb 2"
test_vector "${PLUGIN}" "JAE 2" 7300 "jae 2"
test_vector "${PLUGIN}" "JE 2" 7400 "je 2"
test_vector "${PLUGIN}" "JNZ 2" 7500 "jne 2"
test_vector "${PLUGIN}" "JBE 2" 7600 "jbe 2"
test_vector "${PLUGIN}" "JA 2" 7700 "ja 2"
test_vector "${PLUGIN}" "JS 2" 7800 "js 2"
test_vector "${PLUGIN}" "JNS 2" 7900 "jns 2"
test_vector "${PLUGIN}" "JP 2" 7a00 "jp 2"
test_vector "${PLUGIN}" "JNP 2" 7b00 "jnp 2"
test_vector "${PLUGIN}" "JL 2" 7c00 "jl 2"
test_vector "${PLUGIN}" "JGE 2" 7d00 "jge 2"
test_vector "${PLUGIN}" "JLE 2" 7e00 "jle 2"
test_vector "${PLUGIN}" "JG 2" 7f00 "jg 2"
test_vector "${PLUGIN}" "JO 6" 0f8000000000 "jo 6"
test_vector "${PLUGIN}" "JNO 6" 0f8100000000 "jno 6"
test_vector "${PLUGIN}" "JB 6" 0f8200000000 "jb 6"
test_vector "${PLUGIN}" "JAE 6" 0f8300000000 "jae 6"
test_vector "${PLUGIN}" "JE 6" 0f8400000000 "je 6"
test_vector "${PLUGIN}" "JNE 6" 0f8500000000 "jne 6"
test_vector "${PLUGIN}" "JBE 6" 0f8600000000 "jbe 6"
test_vector "${PLUGIN}" "JA 6" 0f8700000000 "ja 6"
test_vector "${PLUGIN}" "JS 6" 0f8800000000 "js 6"
test_vector "${PLUGIN}" "JNS 6" 0f8900000000 "jns 6"
test_vector "${PLUGIN}" "JP 6" 0f8a00000000 "jp 6"
test_vector "${PLUGIN}" "JNP 6" 0f8b00000000 "jnp 6"
test_vector "${PLUGIN}" "JL 6" 0f8c00000000 "jl 6"
test_vector "${PLUGIN}" "JGE 6" 0f8d00000000 "jge 6"
test_vector "${PLUGIN}" "JLE 6" 0f8e00000000 "jle 6"
test_vector "${PLUGIN}" "JG 6" 0f8f00000000 "jg 6"
test_vector "${PLUGIN}" "SETO [EAX]" 660f9000 "seto byte [eax]"
test_vector "${PLUGIN}" "SETNO [EAX]" 660f9100 "setno byte [eax]"
test_vector "${PLUGIN}" "SETB [EAX]" 660f9200 "setb byte [eax]"
test_vector "${PLUGIN}" "SETAE [EAX]" 660f9300 "setae byte [eax]"
test_vector "${PLUGIN}" "SETE [EAX]" 660f9400 "sete byte [eax]"
test_vector "${PLUGIN}" "SETNE [EAX]" 660f9500 "setne byte [eax]"
test_vector "${PLUGIN}" "SETBE [EAX]" 660f9600 "setbe byte [eax]"
test_vector "${PLUGIN}" "SETA [EAX]" 660f9700 "seta byte [eax]"
test_vector "${PLUGIN}" "SETS [EAX]" 660f9800 "sets byte [eax]"
test_vector "${PLUGIN}" "SETNS [EAX]" 660f9900 "setns byte [eax]"
test_vector "${PLUGIN}" "SETP [EAX]" 660f9a00 "setp byte [eax]"
test_vector "${PLUGIN}" "SETNP [EAX]" 660f9b00 "setnp byte [eax]"
test_vector "${PLUGIN}" "SETL [EAX]" 660f9c00 "setl byte [eax]"
test_vector "${PLUGIN}" "SETGE [EAX]" 660f9d00 "setge byte [eax]"
test_vector "${PLUGIN}" "SETLE [EAX]" 660f9e00 "setle byte [eax]"
test_vector "${PLUGIN}" "SETG [EAX]" 660f9f00 "setg byte [eax]"
test_vector "${PLUGIN}" "CMOVO EAX, DWORD [EAX]" 0f4000 "cmovo eax, dword [eax]"
test_vector "${PLUGIN}" "CMOVNO EAX, DWORD [EAX]" 0f4100 "cmovno eax, dword [eax]"
test_vector "${PLUGIN}" "CMOVB EAX, DWORD [EAX]" 0f4200 "cmovb eax, dword [eax]"
test_vector "${PLUGIN}" "CMOVAE EAX, DWORD [EAX]" 0f4300 "cmovae eax, dword [eax]"
test_vector "${PLUGIN}" "CMOVE EAX, DWORD [EAX]" 0f4400 "cmove eax, dword [eax]"
test_vector "${PLUGIN}" "CMOVNE EAX, DWORD [EAX]" 0f4500 "cmovne eax, dword [eax]"
test_vector "${PLUGIN}" "CMOVBE EAX, DWORD [EAX]" 0f4600 "cmovbe eax, dword [eax]"
test_vector "${PLUGIN}" "CMOVA EAX, DWORD [EAX]" 0f4700 "cmova eax, dword [eax]"
test_vector "${PLUGIN}" "CMOVS EAX, DWORD [EAX]" 0f4800 "cmovs eax, dword [eax]"
test_vector "${PLUGIN}" "CMOVNS EAX, DWORD [EAX]" 0f4900 "cmovns eax, dword [eax]"
test_vector "${PLUGIN}" "CMOVP EAX, DWORD [EAX]" 0f4a00 "cmovp eax, dword [eax]"
test_vector "${PLUGIN}" "CMOVNP EAX, DWORD [EAX]" 0f4b00 "cmovnp eax, dword [eax]"
test_vector "${PLUGIN}" "CMOVL EAX, DWORD [EAX]" 0f4c00 "cmovl eax, dword [eax]"
test_vector "${PLUGIN}" "CMOVGE EAX, DWORD [EAX]" 0f4d00 "cmovge eax, dword [eax]"
test_vector "${PLUGIN}" "CMOVLE EAX, DWORD [EAX]" 0f4e00 "cmovle eax, dword [eax]"
test_vector "${PLUGIN}" "CMOVG EAX, [EAX]" 0f4f00 "cmovg eax, dword [eax]"
test_vector "${PLUGIN}" "MOV AL, BYTE [EAX]" 8a00 "mov al, byte [eax]"
test_vector "${PLUGIN}" "MOV EAX, DWORD [EAX]" 8b00 "mov eax, dword [eax]"
test_vector "${PLUGIN}" "MOV WORD [EAX], ES" 8c00 "mov word [eax], es"
test_vector "${PLUGIN}" "MOV ES, WORD [EAX]" 8e00 "mov es, word [eax]"
test_vector "${PLUGIN}" "LEA EAX, [EAX]" 8d00 "lea eax, [eax]"
test_vector "${PLUGIN}" "POP DWORD [EAX]" 8f00 "pop dword [eax]"
test_vector "${PLUGIN}" "NOP" 90 "nop"
test_vector "${PLUGIN}" "XCHG EAX, ECX" 91 "xchg eax, ecx"
test_vector "${PLUGIN}" "XCHG EAX, EDX" 92 "xchg eax, edx"
test_vector "${PLUGIN}" "XCHG EAX, EBX" 93 "xchg eax, ebx"
test_vector "${PLUGIN}" "XCHG EAX, ESP" 94 "xchg eax, esp"
test_vector "${PLUGIN}" "XCHG EAX, EBP" 95 "xchg eax, ebp"
test_vector "${PLUGIN}" "XCHG EAX, ESI" 96 "xchg eax, esi"
test_vector "${PLUGIN}" "XCHG EAX, EDI" 97 "xchg eax, edi"
test_vector "${PLUGIN}" "MOVSB BYTE ES:[EDI], BYTE PTR [ESI]" a4 "movsb byte es:[edi], byte ptr [esi]"
test_vector "${PLUGIN}" "MOVSD DWORD ES:[EDI], DWORD PTR [ESI]" a5 "movsd dword es:[edi], dword ptr [esi]"
test_vector "${PLUGIN}" "CMPSB BYTE [ESI], BYTE PTR ES:[EDI]" a6 "cmpsb byte [esi], byte ptr es:[edi]"
test_vector "${PLUGIN}" "CMPSD DWORD [ESI], DWORD PTR ES:[EDI]" a7 "cmpsd dword [esi], dword ptr es:[edi]"
test_vector "${PLUGIN}" "STOSB BYTE ES:[EDI], AL" aa "stosb byte es:[edi], al"
test_vector "${PLUGIN}" "STOSD DWORD ES:[EDI], EAX" ab "stosd dword es:[edi], eax"
test_vector "${PLUGIN}" "LODSB AL, BYTE [ESI]" ac "lodsb al, byte [esi]"
test_vector "${PLUGIN}" "LODSD EAX, DWORD [ESI]" ad "lodsd eax, dword [esi]"
test_vector "${PLUGIN}" "SCASB AL, BYTE ES:[EDI]" ae "scasb al, byte es:[edi]"
test_vector "${PLUGIN}" "SCASD EAX, DWORD ES:[EDI]" af "scasd eax, dword es:[edi]"
test_vector "${PLUGIN}" "PREFETCH BYTE [EAX]" 0f0d00 "prefetch byte [eax]" br
test_vector "${PLUGIN}" "PREFETCHNTA BYTE [EAX]" 0f1800 "prefetchnta byte [eax]"
test_vector "${PLUGIN}" "PREFETCHT0 BYTE [EAX]" 0f1808 "prefetcht0 byte [eax]"
test_vector "${PLUGIN}" "PREFETCHT1 BYTE [EAX]" 0f1810 "prefetcht1 byte [eax]"
test_vector "${PLUGIN}" "PREFETCHT2 BYTE [EAX]" 0f1818 "prefetcht2 byte [eax]"
test_vector "${PLUGIN}" "SYSCALL" 0f05 "syscall"
test_vector "${PLUGIN}" "WRMSR" 0f30 "wrmsr"
test_vector "${PLUGIN}" "RDTSC" 0f31 "rdtsc"
test_vector "${PLUGIN}" "RDMSR" 0f32 "rdmsr"
test_vector "${PLUGIN}" "RDPMC" 0f33 "rdpmc"
test_vector "${PLUGIN}" "SYSENTER" 0f34 "sysenter"
test_vector "${PLUGIN}" "SYSEXIT" 0f35 "sysexit"
test_vector "${PLUGIN}" "CRC32 EAX, BYTE [EAX]" f20f38f0 "crc32 eax, byte [eax]"
test_vector "${PLUGIN}" "CRC32 EAX, DWORD [EAX]" f20f38f1 "crc32 eax, dword [eax]"
test_vector "${PLUGIN}" "BT DWORD [EAX], EAX" 0fa300 "bt dword [eax], eax"
test_vector "${PLUGIN}" "BTS DWORD [EAX], EAX" 0fab00 "bts dword [eax], eax"
test_vector "${PLUGIN}" "BTR DWORD [EAX], EAX" 0fb300 "btr dword [eax], eax"
test_vector "${PLUGIN}" "SHLD DWORD [EAX], EAX, 0" 0fa40000 "shld dword [eax], eax, 0"
test_vector "${PLUGIN}" "SHLD DWORD [EAX], EAX, CL" 0fa500 "shld dword [eax], eax, cl"
test_vector "${PLUGIN}" "SHRD DWORD [EAX], EAX, 0" 0fac0000 "shrd dword [eax], eax, 0"
test_vector "${PLUGIN}" "SHRD DWORD [EAX], EAX, CL" 0fad00 "shrd dword [eax], eax, cl"
test_vector "${PLUGIN}" "BSWAP EAX" 0fc8 "bswap eax"
test_vector "${PLUGIN}" "BSWAP ECX" 0fc9 "bswap ecx"
test_vector "${PLUGIN}" "BSWAP EDX" 0fca "bswap edx"
test_vector "${PLUGIN}" "BSWAP EBX" 0fcb "bswap ebx"
test_vector "${PLUGIN}" "BSWAP ESP" 0fcc "bswap esp"
test_vector "${PLUGIN}" "BSWAP EBP" 0fcd "bswap ebp"
test_vector "${PLUGIN}" "BSWAP ESI" 0fce "bswap esi"
test_vector "${PLUGIN}" "BSWAP EDI" 0fcf "bswap edi"
test_vector "${PLUGIN}" "INSB BYTE ES:[EDI], DX" 6c "insb byte es:[edi], dx"
test_vector "${PLUGIN}" "INSD DWORD ES:[EDI], DX" 6d "insd dword es:[edi], dx"
test_vector "${PLUGIN}" "OUTSB DX, BYTE [ESI]" 6e "outsb dx, byte [esi]"
test_vector "${PLUGIN}" "OUTSD DX, DWORD [ESI]" 6f "outsd dx, dword [esi]"
test_vector "${PLUGIN}" "MFENCE" 0faef0 "mfence"
test_vector "${PLUGIN}" "LFENCE" 0faee8 "lfence"
test_vector "${PLUGIN}" "SFENCE" 0faef8 "sfence"
test_vector "${PLUGIN}" "SMSW AX" 660f01e0 "smsw ax"
test_vector "${PLUGIN}" "SMSW EAX" 0f01e0 "smsw eax"
test_vector "${PLUGIN}" "LMSW AX" 0f01f0 "lmsw ax"
test_vector "${PLUGIN}" "FXSAVE [EAX]" 0fae00 "fxsave [eax]"
test_vector "${PLUGIN}" "FXRSTOR [EAX]" 0fae08 "fxrstor [eax]"
test_vector "${PLUGIN}" "LDMXCSR [EAX]" 0fae10 "ldmxcsr dword [eax]"
test_vector "${PLUGIN}" "STMXCSR [EAX]" 0fae18 "stmxcsr dword [eax]"
test_vector "${PLUGIN}" "XSAVE [EAX]" 0fae20 "xsave [eax]"
test_vector "${PLUGIN}" "XRSTOR [EAX]" 0fae28 "xrstor [eax]"
test_vector "${PLUGIN}" "CLFLUSH BYTE [EAX]" 0fae38 "clflush byte [eax]"
test_vector "${PLUGIN}" "TEST BYTE [EAX], 0" f60000 "test byte [eax], 0"
test_vector "${PLUGIN}" "TEST BYTE [EAX], 0" f60800 "test byte [eax], 0"
test_vector "${PLUGIN}" "NOT BYTE [EAX]" f610 "not byte [eax]"
test_vector "${PLUGIN}" "NEG BYTE [EAX]" f618 "neg byte [eax]"
test_vector "${PLUGIN}" "MUL BYTE [EAX]" f620 "mul byte [eax]"
test_vector "${PLUGIN}" "IMUL BYTE [EAX]" f628 "imul byte [eax]"
test_vector "${PLUGIN}" "DIV BYTE [EAX]" f630 "div byte [eax]"
test_vector "${PLUGIN}" "IDIV BYTE [EAX]" f638 "idiv byte [eax]"
test_vector "${PLUGIN}" "TEST DWORD [EAX], 0" f70000 "test dword [eax], 0"
test_vector "${PLUGIN}" "TEST DWORD [EAX], 0" f70800 "test dword [eax], 0"
test_vector "${PLUGIN}" "VZEROALL" c5fc77 "vzeroall"
test_vector "${PLUGIN}" "VZEROUPPER" c5f877 "vzeroupper"
test_vector "${PLUGIN}" "MOV DWORD ES:[EAX], EAX" 268900 "mov dword es:[eax], eax"
test_vector "${PLUGIN}" "MOV DWORD CS:[EAX], EAX" 2e8900 "mov dword cs:[eax], eax"
test_vector "${PLUGIN}" "MOV DWORD SS:[EAX], EAX" 368900 "mov dword ss:[eax], eax"
test_vector "${PLUGIN}" "MOV DWORD DS:[EAX], EAX" 3e8900 "mov dword ds:[eax], eax"
test_vector "${PLUGIN}" "MOV DWORD FS:[EAX], EAX" 648900 "mov dword fs:[eax], eax"
test_vector "${PLUGIN}" "MOV DWORD GS:[EAX], EAX" 658900 "mov dword gs:[eax], eax"
test_vector "${PLUGIN}" "BOUND EAX, QWORD [EAX]" 6200 "bound eax, qword [eax]"
test_vector "${PLUGIN}" "ARPL WORD [EAX], AX" 6300 "arpl word [eax], ax"
test_vector "${PLUGIN}" "CMPXCHG BYTE [EAX], AL" 0fb000 "cmpxchg byte [eax], al"
test_vector "${PLUGIN}" "CMPXCHG DWORD [EAX], EAX" 0fb100 "cmpxchg dword [eax], eax"
test_vector "${PLUGIN}" "CMPXCHG8B DWORD [EAX]" 0fc7c0 "cmpxchg8b dword [eax]" "br"
test_vector "${PLUGIN}" "LOCK CMPXCHG8B" f00fc7c0 "lock" br
test_vector "${PLUGIN}" "VMPTRLD QWORD [EAX]" 0fc730 "vmptrld qword [eax]"
test_vector "${PLUGIN}" "VMCLEAR QWORD [EAX]" 660fc730 "vmclear qword [eax]"
test_vector "${PLUGIN}" "VMXON QWORD [EAX]" f30fc730 "vmxon qword [eax]"
test_vector "${PLUGIN}" "VMPTRST QWORD [EAX]" 0fc738 "vmptrst qword [eax]"
test_vector "${PLUGIN}" "ADC BYTE [EAX], AL" 1000 "adc byte [eax], al"
test_vector "${PLUGIN}" "ADC DWORD [EAX], EAX" 1100 "adc dword [eax], eax"
test_vector "${PLUGIN}" "ADC AL, BYTE [EAX]" 1200 "adc al, byte [eax]"
test_vector "${PLUGIN}" "ADC EAX, DWORD [EAX]" 1300 "adc eax, dword [eax]"
test_vector "${PLUGIN}" "ADC AL, 0" 1400 "adc al, 0"
test_vector "${PLUGIN}" "ADD BYTE [EAX],  AL" 0000 "add byte [eax], al"
test_vector "${PLUGIN}" "ADD DWORD [EAX], EAX" 0100 "add dword [eax], eax"
test_vector "${PLUGIN}" "ADD AL, BYTE [EAX]" 0200 "add al, byte [eax]"
test_vector "${PLUGIN}" "ADD EAX, DWORD [EAX]" 0300 "add eax, dword [eax]"
test_vector "${PLUGIN}" "ADD AL, 0" 0400 "add al, 0"
test_vector "${PLUGIN}" "ADD DWORD [EAX], 0" 810000000000 "add dword [eax], 0"
test_vector "${PLUGIN}" "ADD BYTE [EAX], 0" 800000 "add byte [eax], 0"
test_vector "${PLUGIN}" "ADD BYTE [EAX], 0" 820000 "add byte [eax], 0"
test_vector "${PLUGIN}" "ADD DWORD [EAX], 0" 830000 "add dword [eax], 0"
test_vector "${PLUGIN}" "AND BYTE [EAX], AL" 2000 "and byte [eax], al"
test_vector "${PLUGIN}" "AND DWORD [EAX], EAX" 2100 "and dword [eax], eax"
test_vector "${PLUGIN}" "AND AL, BYTE [EAX]" 2200 "and al, byte [eax]"
test_vector "${PLUGIN}" "AND EAX, DWORD [EAX]" 2300 "and eax, dword [eax]"
test_vector "${PLUGIN}" "AND AL, 0" 2400 "and al, 0"
test_vector "${PLUGIN}" "CMP BYTE [EAX], AL" 3800 "cmp byte [eax], al"
test_vector "${PLUGIN}" "CMP DWORD [EAX], EAX" 3900 "cmp dword [eax], eax"
test_vector "${PLUGIN}" "CMP AL, BYTE [EAX]" 3a00 "cmp al, byte [eax]"
test_vector "${PLUGIN}" "CMP EAX, DWORD [EAX]" 3b00 "cmp eax, dword [eax]"
test_vector "${PLUGIN}" "CMP AL, 0" 3c00 "cmp al, 0"
test_vector "${PLUGIN}" "MOV BYTE [EAX], AL" 8800 "mov byte [eax], al"
test_vector "${PLUGIN}" "MOV DWORD [EAX], EAX" 8900 "mov dword [eax], eax"
test_vector "${PLUGIN}" "MOV AL, [EAX]" 8a00 "mov al, byte [eax]"
test_vector "${PLUGIN}" "MOV AL, BYTE [0]" a000000000 "mov al, byte [0]"
test_vector "${PLUGIN}" "MOV EAX, DWORD [0]" a100000000 "mov eax, dword [0]"
test_vector "${PLUGIN}" "MOV BYTE [0], AL" a200000000 "mov byte [0], al"
test_vector "${PLUGIN}" "MOV DWORD [0], EAX" a300000000 "mov dword [0], eax"
test_vector "${PLUGIN}" "MOV AL, 0" b000 "mov al, 0"
test_vector "${PLUGIN}" "MOV CL, 0" b100 "mov cl, 0"
test_vector "${PLUGIN}" "MOV DL, 0" b200 "mov dl, 0"
test_vector "${PLUGIN}" "MOV BL, 0" b300 "mov bl, 0"
test_vector "${PLUGIN}" "MOV AH, 0" b400 "mov ah, 0"
test_vector "${PLUGIN}" "MOV CH, 0" b500 "mov ch, 0"
test_vector "${PLUGIN}" "MOV DH, 0" b600 "mov dh, 0"
test_vector "${PLUGIN}" "MOV BH, 0" b700 "mov bh, 0"
test_vector "${PLUGIN}" "MOV EAX, 0" b800000000 "mov eax, 0"
test_vector "${PLUGIN}" "MOV ECX, 0" b900000000 "mov ecx, 0"
test_vector "${PLUGIN}" "MOV EDX, 0" ba00000000 "mov edx, 0"
test_vector "${PLUGIN}" "MOV EBX, 0" bb00000000 "mov ebx, 0"
test_vector "${PLUGIN}" "MOV ESP, 0" bc00000000 "mov esp, 0"
test_vector "${PLUGIN}" "MOV EBP, 0" bd00000000 "mov ebp, 0"
test_vector "${PLUGIN}" "MOV ESI, 0" be00000000 "mov esi, 0"
test_vector "${PLUGIN}" "MOV EDI, 0" bf00000000 "mov edi, 0"
test_vector "${PLUGIN}" "OR BYTE [EAX], AL" 0800 "or byte [eax], al"
test_vector "${PLUGIN}" "OR DWORD [EAX], EAX" 0900 "or dword [eax], eax"
test_vector "${PLUGIN}" "OR EAX, DWORD [EAX]" 0b00 "or eax, dword [eax]"
test_vector "${PLUGIN}" "OR AL, 0" 0c00 "or al, 0"
test_vector "${PLUGIN}" "SBB BYTE [EAX], AL" 1800 "sbb byte [eax], al"
test_vector "${PLUGIN}" "SBB DWORD [EAX], EAX" 1900 "sbb dword [eax], eax"
test_vector "${PLUGIN}" "SBB AL, BYTE [EAX]" 1a00 "sbb al, byte [eax]"
test_vector "${PLUGIN}" "SBB EAX, DWORD [EAX]" 1b00 "sbb eax, dword [eax]"
test_vector "${PLUGIN}" "SBB AL, 0" 1c00 "sbb al, 0"
test_vector "${PLUGIN}" "SUB BYTE [EAX], AL" 2800 "sub byte [eax], al"
test_vector "${PLUGIN}" "SUB DWORD [EAX], EAX" 2900 "sub dword [eax], eax"
test_vector "${PLUGIN}" "SUB AL, BYTE [EAX]" 2a00 "sub al, byte [eax]"
test_vector "${PLUGIN}" "SUB EAX, DWORD [EAX]" 2b00 "sub eax, dword [eax]"
test_vector "${PLUGIN}" "SUB AL, 0" 2c00 "sub al, 0"
test_vector "${PLUGIN}" "TEST AL, BYTE [EAX]" 8400 "test byte [eax], al"
test_vector "${PLUGIN}" "TEST EAX, DWORD [EAX]" 8500 "test dword [eax], eax"
test_vector "${PLUGIN}" "TEST AL, 0" a800 "test al, 0"
test_vector "${PLUGIN}" "TEST EAX, 0" a900000000 "test eax, 0"
test_vector "${PLUGIN}" "TEST BYTE [EAX], 0" f60000 "test byte [eax], 0"
test_vector "${PLUGIN}" "TEST DWORD [EAX], 0" f70000000000 "test dword [eax], 0"
test_vector "${PLUGIN}" "XCHG BYTE [EAX], AL" 8600 "xchg byte [eax], al"
test_vector "${PLUGIN}" "XCHG DWORD [EAX], EAX" 8700 "xchg dword [eax], eax"
test_vector "${PLUGIN}" "XOR BYTE [EAX], AL" 3000 "xor byte [eax], al"
test_vector "${PLUGIN}" "XOR DWORD [EAX], EAX" 3100 "xor dword [eax], eax"
test_vector "${PLUGIN}" "XOR AL, BYTE [EAX]" 3200 "xor al, byte [eax]"
test_vector "${PLUGIN}" "XOR EAX, DWORD [EAX]" 3300 "xor eax, dword [eax]"
test_vector "${PLUGIN}" "XOR AL, 0" 3400 "xor al, 0"
test_vector "${PLUGIN}" "BTC DWORD [EAX], EAX" 0fbb00 "btc dword [eax], eax"
test_vector "${PLUGIN}" "BSF EAX, DWORD [EAX]" 0fbc00 "bsf eax, dword [eax]"
test_vector "${PLUGIN}" "BSR EAX, DWORD [EAX]" 0fbd00 "bsr eax, dword [eax]"
test_vector "${PLUGIN}" "ROL BYTE [EAX], 0" c00000 "rol byte [eax], 0"
test_vector "${PLUGIN}" "ROL DWORD [EAX], 0" c10000 "rol dword [eax], 0"
test_vector "${PLUGIN}" "LES EAX, [EAX]" c400 "les eax, [eax]"
test_vector "${PLUGIN}" "LDS EAX, [EAX]" c500 "lds eax, [eax]"
test_vector "${PLUGIN}" "MOV BYTE [EAX], 0" c60000 "mov byte [eax], 0"
test_vector "${PLUGIN}" "MOV DWORD [EAX], 0" c70000000000 "mov dword [eax], 0"
test_vector "${PLUGIN}" "ROL BYTE [EAX], CL" d200 "rol byte [eax], cl"
test_vector "${PLUGIN}" "ROL DWORD [EAX], CL" d300 "rol dword [eax], cl"
test_vector "${PLUGIN}" "SHUFPS XMM0, XMMWORD [EAX], 0" 0fc60000 "shufps xmm0, xmmword [eax], 0"
test_vector "${PLUGIN}" "PSUBUSB MM0, QWORD [EAX]" 0fd800 "psubusb mm0, qword [eax]"
test_vector "${PLUGIN}" "PSUBUSW MM0, QWORD [EAX]" 0fd900 "psubusw mm0, qword [eax]"
test_vector "${PLUGIN}" "PAND MM0, QWORD [EAX]" 0fdb00 "pand mm0, qword [eax]"
test_vector "${PLUGIN}" "PANDN MM0, QWORD [EAX]" 0fdf00 "pandn mm0, qword [eax]"
test_vector "${PLUGIN}" "POR MM0, QWORD [EAX]" 0feb00 "por mm0, qword [eax]"
test_vector "${PLUGIN}" "PXOR MM0, QWORD [EAX]" 0fef00 "pxor mm0, qword [eax]"
test_vector "${PLUGIN}" "PADDUSB MM0, QWORD [EAX]" 0fdc00 "paddusb mm0, qword [eax]"
test_vector "${PLUGIN}" "PADDUSW MM0, QWORD [EAX]" 0fdd00 "paddusw mm0, qword [eax]"
test_vector "${PLUGIN}" "PMAXUB MM0, QWORD [EAX]" 0fde00 "pmaxub mm0, qword [eax]"
test_vector "${PLUGIN}" "PMINUB MM0, QWORD [EAX]" 0fda00 "pminub mm0, qword [eax]"
test_vector "${PLUGIN}" "PAVGB MM0, QWORD [EAX]" 0fe000 "pavgb mm0, qword [eax]"
test_vector "${PLUGIN}" "PAVGW MM0, QWORD [EAX]" 0fe300 "pavgw mm0, qword [eax]"
test_vector "${PLUGIN}" "MOVNTQ QWORD [EAX], MM0" 0fe700 "movntq qword [eax], mm0"
test_vector "${PLUGIN}" "MOVNTDQ XMMWORD [EAX], XMM0" 660fe700 "movntdq xmmword [eax], xmm0"
test_vector "${PLUGIN}" "PSUBSB MM0, XMMWORD [EAX]" 0fe800 "psubsb mm0, qword [eax]"
test_vector "${PLUGIN}" "PSUBSW MM0, XMMWORD [EAX]" 0fe900 "psubsw mm0, qword [eax]"
test_vector "${PLUGIN}" "PMINSW MM0, XMMWORD [EAX]" 0fea00 "pminsw mm0, qword [eax]"
test_vector "${PLUGIN}" "PMAXSW MM0, XMMWORD [EAX]" 0fee00 "pmaxsw mm0, qword [eax]"
test_vector "${PLUGIN}" "PADDSB MM0, XMMWORD [EAX]" 0fec00 "paddsb mm0, qword [eax]"
test_vector "${PLUGIN}" "PADDSW MM0, XMMWORD [EAX]" 0fed00 "paddsw mm0, qword [eax]"
test_vector "${PLUGIN}" "PSRAW MM0, QWORD [EAX]" 0fe100 "psraw mm0, qword [eax]"
test_vector "${PLUGIN}" "PSRAD MM0, QWORD [EAX]" 0fe200 "psrad mm0, qword [eax]"
test_vector "${PLUGIN}" "PSRAW XMM0, XMMWORD [EAX]" 660fe100 "psraw xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "PSRAD XMM0, xmmword [EAX]" 660fe200 "psrad xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "LOCK AND WORD [FS:BX + SI], SI" 646766f02130 "lock and word fs:[bx + si], si"
test_vector "${PLUGIN}" "MOV EAX, DWORD [EAX]" 8b00 "mov eax, dword [eax]"
test_vector "${PLUGIN}" "MOVSD DWORD ES:[EDI], DWORD PTR [ESI]" a5 "movsd dword es:[edi], dword ptr [esi]"
test_vector "${PLUGIN}" "MOV EAX, DWORD [EBP]" 8b4500 "mov eax, dword [ebp]"
test_vector "${PLUGIN}" "MOV EAX, DWORD [ESP]" 8b0424 "mov eax, dword [esp]"
test_vector "${PLUGIN}" "MOV EAX, DWORD FS:[EBP]" 648b4500 "mov eax, dword fs:[ebp]"
test_vector "${PLUGIN}" "MOVSD DWORD ES:[EDI], DWORD PTR FS:[ESI]" 64a5 "movsd dword es:[edi], dword ptr fs:[esi]"
test_vector "${PLUGIN}" "MOVSB BYTE ES:[EDI], BYTE ptr [ESI]" a4 "movsb byte es:[edi], byte ptr [esi]"
test_vector "${PLUGIN}" "REPZ MOVSB" f3a4 "repz movsb" "br" #or repe
test_vector "${PLUGIN}" "REPNE MOVSB BYTE ES:[EDI], BYTE PTR [ESI]" f2a4 "repne movsb byte es:[edi], byte ptr [esi]"
test_vector "${PLUGIN}" "MOV DWORD [EAX], EAX" 8900 "mov dword [eax], eax"
# This is not a valid instruction. gcc cant assemble it
test_vector "${PLUGIN}" "LOCK MOV DWORD [EAX], EAX" f08900 "lock mov dword [eax], eax" "br"
# This is not a valid instruction. gcc cant assemble it
test_vector "${PLUGIN}" "LOCK MOV EAX, EAX" f089c0 "lock mov eax, eax" "br"
test_vector "${PLUGIN}" "ADD BYTE [EAX], AL" 00000000 "add byte [eax], al"
test_vector "${PLUGIN}" "ADD BYTE [BX + SI], AL" 670000 "add byte [bx + si], al"
test_vector "${PLUGIN}" "JMP 3" 66EB00  "jmp 3"
test_vector "${PLUGIN}" "LOOP 3" 66e200 "loop 3"
test_vector "${PLUGIN}" "CALL 4" 66e8000000 "call 4"
test_vector "${PLUGIN}" "RET" 66c3 "retw" "br"
test_vector "${PLUGIN}" "PEXTRQ DWORD [EAX], XMM0, 0" 660f3a16 "pextrq dword [eax], xmm0, 0" "br"
test_vector "${PLUGIN}" "PINSRD XMM0, DWORD [EAX], 0" 660f3a22 "pinsrd xmm0, dword [eax], 0"
test_vector "${PLUGIN}" "PINSRQ XMM0, DWORD [EAX], 0" 660f3a22 "pinsrq xmm0, dword [eax], 0" "br"
test_vector "${PLUGIN}" "SWAPGS" 0f1ff8 "swapgs" "br"
test_vector "${PLUGIN}" "CDQE" 98 "cdqe" "br"
test_vector "${PLUGIN}" "CMPXCHG16B [EAX]" 67480f0c7 "cmpxchg16b [eax]" "br"
test_vector "${PLUGIN}" "CALL 5" e8 "call 5"
test_vector "${PLUGIN}" "LCALL 0, 0" 9a "lcall 0, 0" "br"
test_vector "${PLUGIN}" "CALL DWORD [EAX]" ff10 "call dword [eax]"
test_vector "${PLUGIN}" "LCALL [EAX]" ff18 "lcall [eax]"
test_vector "${PLUGIN}" "LCALL [0]" ff1c2500000000 "lcall [0]"
test_vector "${PLUGIN}" "PAVGB MM0, QWORD [EAX]" 0fe0 "pavgb mm0, qword [eax]"
test_vector "${PLUGIN}" "POPCNT EAX, QWORD [EAX]" f30fb8 "popcnt eax, qword [eax]" "br"
test_vector "${PLUGIN}" "LSS EAX, DWORD [EAX]" 0fb200 "lss eax, dword [eax]" "br" #where are the size
test_vector "${PLUGIN}" "LFS EAX, DWORD [EAX]" 0fb400 "lfs eax, dword [eax]" "br"
test_vector "${PLUGIN}" "LGS EAX, DWORD [EAX]" 0fb500 "lgs eax, dword [eax]" "br"
test_vector "${PLUGIN}" "MOVZX EAX, BYTE [EAX]" 0fb600 "movzx eax, byte [eax]"
test_vector "${PLUGIN}" "MOVZX EAX, WORD [EAX]" 0fb700 "movzx eax, word [eax]"
test_vector "${PLUGIN}" "MOVSX EAX, BYTE [EAX]" 0fbe00 "movsx eax, byte [eax]"
test_vector "${PLUGIN}" "MOVSX EAX, WORD [EAX]" 0fbf00 "movsx eax, word [eax]"
test_vector "${PLUGIN}" "XADD BYTE [EAX], AL" 0fc000 "xadd byte [eax], al"
test_vector "${PLUGIN}" "XADD DWORD [EAX], EAX" 0fc100 "xadd dword [eax], eax"
test_vector "${PLUGIN}" "MOVNTI DWORD [EAX], EAX" 0fc300 "movnti dword [eax], eax"
test_vector "${PLUGIN}" "PINSRW MM0, WORD [EAX], 0X0" 0fc40000 "pinsrw mm0, word [eax], 0"
test_vector "${PLUGIN}" "PINSRW XMM0, WORD [EAX], 0X0" 660fc40000 "pinsrw xmm0, word [eax], 0"
test_vector "${PLUGIN}" "PEXTRW EAX, MM0, 0" 0fc5c000 "pextrw eax, mm0, 0"
test_vector "${PLUGIN}" "PEXTRW EAX, XMM0, 0" 660fc5c000 "pextrw eax, xmm0, 0"
test_vector "${PLUGIN}" "PEXTRB EAX, XMM0, 0" 660f3a14c000 "pextrb eax, xmm0, 0"
test_vector "${PLUGIN}" "PEXTRD EAX, XMM0, 0" 660f3a16c000 "pextrd eax, xmm0, 0"
test_vector "${PLUGIN}" "PSRAW MM0, 0" 0f71e000 "psraw mm0, 0"
test_vector "${PLUGIN}" "PSRAD MM0, 0" 0f72e000 "psrad mm0, 0"
test_vector "${PLUGIN}" "PSRAW XMM0, 0" 660f71e000 "psraw xmm0, 0"
test_vector "${PLUGIN}" "PSRAD XMM0, 0" 660f72e000 "psrad xmm0, 0"
test_vector "${PLUGIN}" "MASKMOVQ MM0, MM0" 0ff7 "maskmovq mm0, mm0" "br"
test_vector "${PLUGIN}" "MASKMOVDQU XMM0, XMM0" 660ff7 "maskmovdqu xmm0, xmm0" "br"
test_vector "${PLUGIN}" "PMOVMSKB EAX, MM0" 0fd7 "pmovmskb eax, mm0" "br"
test_vector "${PLUGIN}" "MOVUPD XMM0, XMMWORD [EAX]" 660f1000 "movupd xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "MOVUPD XMMWORD [EAX], XMM0" 660f1100 "movupd xmmword [eax], xmm0"
test_vector "${PLUGIN}" "MOVLPD XMM0, QWORD [EAX]" 660f1200 "movlpd xmm0, qword [eax]"
test_vector "${PLUGIN}" "MOVLPD QWORD [EAX], XMM0" 660f1300 "movlpd qword [eax], xmm0"
test_vector "${PLUGIN}" "UNPCKLPD XMM0, XMMWORD [EAX]" 660f1400 "unpcklpd xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "UNPCKHPD XMM0, XMMWORD [EAX]" 660f1500 "unpckhpd xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "MOVHPD XMM0, QWORD [EAX]" 660f1600 "movhpd xmm0, qword [eax]"
test_vector "${PLUGIN}" "MOVHPD QWORD [EAX], XMM0" 660f1700 "movhpd qword [eax], xmm0"
test_vector "${PLUGIN}" "MOVAPD XMM0, XMMWORD [EAX]" 660f2800 "movapd xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "MOVAPD XMMWORD [EAX], XMM0" 660f2900 "movapd xmmword [eax], xmm0"
test_vector "${PLUGIN}" "PUNPCKLQDQ XMM0, XMMWORD [EAX]" 660f6c00 "punpcklqdq xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "PUNPCKHQDQ XMM0, XMMWORD [EAX]" 660f6d00 "punpckhqdq xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "EXTRQ XMM0, 0X0, 0X0" 660f78000000 "extrq xmm0, 0, 0" "br"
test_vector "${PLUGIN}" "EXTRQ XMM0, XMM0" 660f7900 "extrq xmm0, xmm0" "br"
test_vector "${PLUGIN}" "HADDPD XMM0, XMMWORD [EAX]" 660f7c00 "haddpd xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "HSUBPD XMM0, XMMWORD [EAX]" 660f7d00 "hsubpd xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "HADDPS XMM0, XMMWORD [EAX]" f20f7c00 "haddps xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "HSUBPS XMM0, XMMWORD [EAX]" f20f7d00 "hsubps xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "SHUFPD XMM0, XMMWORD [EAX], 0X0" 660fc60000 "shufpd xmm0, xmmword [eax], 0"
test_vector "${PLUGIN}" "ADDSUBPD XMM0, XMMWORD [EAX]" 660fd000 "addsubpd xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "PADDQ XMM0, XMMWORD [EAX]" 660fd400 "paddq xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "MOVQ QWORD [EAX], XMM0" 660fd600 "movq qword [eax], xmm0"
test_vector "${PLUGIN}" "MOVDQ2Q MM0, XMM0" f20fd6 "movdq2q mm0, xmm0" "br"
test_vector "${PLUGIN}" "MOVQ2DQ XMM0, MM0" f30fd6 "movq2dq xmm0, mm0" "br"
test_vector "${PLUGIN}" "IMUL EAX, [EAX], 0" 690000000000 "imul eax, dword [eax], 0"
test_vector "${PLUGIN}" "IMUL EAX, DWORD [EAX], 0" 6b0000 "imul eax, dword [eax], 0"
test_vector "${PLUGIN}" "IMUL EAX, DWORD [EAX]" 0faf00 "imul eax, dword [eax]"
test_vector "${PLUGIN}" "ROL BYTE [EAX], 1" d000 "rol byte [eax], 1"
test_vector "${PLUGIN}" "ROL DWORD [EAX], 1" d100 "rol dword [eax], 1"
test_vector "${PLUGIN}" "ADDSD XMM0, QWORD [EAX]" f20f5800 "addsd xmm0, qword [eax]"
test_vector "${PLUGIN}" "SUBSD XMM0, QWORD [EAX]" f20f5c00 "subsd xmm0, qword [eax]"
test_vector "${PLUGIN}" "MULSD XMM0, QWORD [EAX]" f20f5900 "mulsd xmm0, qword [eax]"
test_vector "${PLUGIN}" "DIVSD XMM0, QWORD [EAX]" f20f5e00 "divsd xmm0, qword [eax]"
test_vector "${PLUGIN}" "CMPEQPS XMM0, XMMWORD [EAX]" 0fc20000 "cmpeqps xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPLTPS XMM0, XMMWORD [EAX]" 0fc20001 "cmpltps xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPLEPS XMM0, XMMWORD [EAX]" 0fc20002 "cmpleps xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPUNORDPS XMM0, XMMWORD [EAX]" 0fc20003 "cmpunordps xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPNEQPS XMM0, XMMWORD [EAX]" 0fc20004 "cmpneqps xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPNLTPS XMM0, XMMWORD [EAX]" 0fc20005 "cmpnltps xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPNLEPS XMM0, XMMWORD [EAX]" 0fc20006 "cmpnleps xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPORDPS XMM0, XMMWORD [EAX]" 0fc20007 "cmpordps xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPSD XMM0, QWORD [EAX]" f20fc20000 "cmpeqsd xmm0, qword [eax]"
test_vector "${PLUGIN}" "CMPLTSD XMM0, QWORD [EAX]" f20fc20001 "cmpltsd xmm0, qword [eax]"
test_vector "${PLUGIN}" "CMPLESD XMM0, QWORD [EAX]" f20fc20002 "cmplesd xmm0, qword [eax]"
test_vector "${PLUGIN}" "CMPUNORDSD XMM0, QWORD [EAX]" f20fc20003 "cmpunordsd xmm0, qword [eax]"
test_vector "${PLUGIN}" "CMPNEQSD XMM0, QWORD [EAX]" f20fc20004 "cmpneqsd xmm0, qword [eax]"
test_vector "${PLUGIN}" "CMPNLTSD XMM0, QWORD [EAX]" f20fc20005 "cmpnltsd xmm0, qword [eax]"
test_vector "${PLUGIN}" "CMPNLESD XMM0, QWORD [EAX]" f20fc20006 "cmpnlesd xmm0, qword [eax]"
test_vector "${PLUGIN}" "CMPORDSD XMM0, QWORD [EAX]" f20fc20007 "cmpordsd xmm0, qword [eax]"
test_vector "${PLUGIN}" "CMPEQPD XMM0, XMMWORD [EAX]" 660fc20000 "cmpeqpd xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPLTPD XMM0, XMMWORD [EAX]" 660fc20001 "cmpltpd xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPLEPD XMM0, XMMWORD [EAX]" 660fc20002 "cmplepd xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPUNORDPD XMM0, XMMWORD [EAX]" 660fc20003 "cmpunordpd xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPNEQPD XMM0, XMMWORD [EAX]" 660fc20004 "cmpneqpd xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPNLTPD XMM0, XMMWORD [EAX]" 660fc20005 "cmpnltpd xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPNLEPD XMM0, XMMWORD [EAX]" 660fc20006 "cmpnlepd xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPORDPD XMM0, XMMWORD [EAX]" 660fc20007 "cmpordpd xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "CMPEQSS XMM0, DWORD [EAX]" f30fc20000 "cmpeqss xmm0, dword [eax]"
test_vector "${PLUGIN}" "CMPLTSS XMM0, DWORD [EAX]" f30fc20001 "cmpltss xmm0, dword [eax]"
test_vector "${PLUGIN}" "CMPLESS XMM0, DWORD [EAX]" f30fc20002 "cmpless xmm0, dword [eax]"
test_vector "${PLUGIN}" "CMPUNORDSS XMM0, DWORD [EAX]" f30fc20003 "cmpunordss xmm0, dword [eax]"
test_vector "${PLUGIN}" "CMPNEQSS XMM0, DWORD [EAX]" f30fc20004 "cmpneqss xmm0, dword [eax]"
test_vector "${PLUGIN}" "CMPNLTSS XMM0, DWORD [EAX]" f30fc20005 "cmpnltss xmm0, dword [eax]"
test_vector "${PLUGIN}" "CMPNLESS XMM0, DWORD [EAX]" f30fc20006 "cmpnless xmm0, dword [eax]"
test_vector "${PLUGIN}" "CMPORDSS XMM0, DWORD [EAX]" f30fc20007 "cmpordss xmm0, dword [eax]"
test_vector "${PLUGIN}" "ADDSUBPS XMM0, XMMWORD [EAX]" f20fd000 "addsubps xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "LDDQU XMM0, XMMWORD [EAX]" f20ff000 "lddqu xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "MOVSS XMM0, DWORD [EAX]" f30f1000 "movss xmm0, dword [eax]"
test_vector "${PLUGIN}" "MOVSS DWORD [EAX], XMM0" f30f1100 "movss dword [eax], xmm0"
test_vector "${PLUGIN}" "MOVSLDUP XMM0, XMMWORD [EAX]" f30f1200 "movsldup xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "MOVSHDUP XMM0, XMMWORD [EAX]" f30f1600 "movshdup xmm0, xmmword [eax]"
test_vector "${PLUGIN}" "ADDSS XMM0, DWORD [EAX]" f30f5800 "addss xmm0, dword [eax]"
test_vector "${PLUGIN}" "SUBSS XMM0, DWORD [EAX]" f30f5c00 "subss xmm0, dword [eax]"
test_vector "${PLUGIN}" "MULSS XMM0, DWORD [EAX]" f30f5900 "mulss xmm0, dword [eax]"
test_vector "${PLUGIN}" "DIVSS XMM0, DWORD [EAX]" f30f5e00 "divss xmm0, dword [eax]"
test_vector "${PLUGIN}" "LZCNT EAX, DWORD [EAX]" f30fbd00 "lzcnt eax, dword [eax]"
