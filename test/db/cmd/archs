NAME=endian tests: mips
FILE=-
CMDS=<<EOF
wx 0f84010a
e asm.arch=mips
e asm.bits=32
e cfg.bigendian=false
pi 1
e cfg.bigendian=true
pi 1
EOF
EXPECT=<<EOF
j 0x806103c
jal 0xe100428
EOF
RUN

NAME=endian tests: arm
FILE=-
CMDS=<<EOF
e asm.arch=arm
e asm.bits=32
wx 0f84010a
e cfg.bigendian=false
pi 1
e cfg.bigendian=true
pi 1
EOF
EXPECT=<<EOF
beq 0x61044
svceq 0x84010a
EOF
RUN

NAME=endian tests: thumb
FILE=-
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 0f84010a
e cfg.bigendian=false
pi 1
e cfg.bigendian=true
pi 1
EOF
EXPECT=<<EOF
strh r7, [r1, 0x20]
lsrs r4, r0, 0x1e
EOF
RUN

NAME=endian tests: arm64
FILE=-
CMDS=<<EOF
e asm.arch=arm
e asm.bits=64
wx 3800740a
e cfg.bigendian=false
pi 1
e cfg.bigendian=true
pi 1
EOF
EXPECT=<<EOF
bic w24, w1, w20, lsr 0
strb w10, [x0], 7
EOF
RUN

NAME=endian tests: sparc
FILE=-
CMDS=<<EOF
e asm.arch=sparc
wx 554889e5
e cfg.bigendian=true
pi 1
e cfg.bigendian=false
pi 1
EOF
EXPECT=<<EOF
call 0x55222794
invalid
EOF
RUN

NAME=endian tests: sparc.gnu
FILE=-
CMDS=<<EOF
e asm.arch=sparc.gnu
e asm.bits=64
wx 554889e5
e cfg.bigendian=true
pi 1
e cfg.bigendian=false
pi 1
EOF
EXPECT=<<EOF
call 0x55222794
invalid
EOF
RUN

NAME=tests: ppcps
FILE=malloc://256
CMDS=<<EOF
wb
e asm.arch=ppc
e cfg.bigendian = true
e asm.cpu=ps
pdi 64
EOF
EXPECT=<<EOF
0x00000000             e003d004  psq_l fr0 0x7(r1) 0x5
0x00000004             e4223008  psq_lu fr1 0xa(r0) 0x3
0x00000008             1045254c  psq_lux fr2 fr5 fr4 0x1 0x2
0x0000000c             1062228c  psq_lx fr3 fr2 fr4 0x0 0x5
0x00000010             f0623008  psq_st fr3 0xa(r0) 0x3
0x00000014             f4627008  psq_stu fr3 0xa(r0) 0x7
0x00000018             104322ce  psq_stux fr2 fr3 fr4 0x0 0x5
0x0000001c             10c7460e  psq_stx fr6 fr7 fr8 0x1 0x4
0x00000020             10a03a10  ps_abs fr5 fr7
0x00000024             10a03a11  ps_abs. fr5 fr7
0x00000028             1022182a  ps_add fr1 fr2 fr3
0x0000002c             1022182b  ps_add. fr1 fr2 fr3
0x00000030             11822040  ps_cmpo0 cr3 fr2 fr4
0x00000034             118220c0  ps_cmpo1 cr3 fr2 fr4
0x00000038             11822000  ps_cmpu0 cr3 fr2 fr4
0x0000003c             11822080  ps_cmpu1 cr3 fr2 fr4
0x00000040             10443024  ps_div fr2 fr4 fr6
0x00000044             10443025  ps_div. fr2 fr4 fr6
0x00000048             100118ba  ps_madd fr0 fr1 fr2 fr3
0x0000004c             100118bb  ps_madd. fr0 fr1 fr2 fr3
0x00000050             102220dc  ps_madds0 fr1 fr2 fr3 fr4
0x00000054             102220dd  ps_madds0. fr1 fr2 fr3 fr4
0x00000058             102220de  ps_madds1 fr1 fr2 fr3 fr4
0x0000005c             102220df  ps_madds1. fr1 fr2 fr3 fr4
0x00000060             10443420  ps_merge00 fr2 fr4 fr6
0x00000064             10443421  ps_merge00. fr2 fr4 fr6
0x00000068             10443460  ps_merge01 fr2 fr4 fr6
0x0000006c             10443461  ps_merge01. fr2 fr4 fr6
0x00000070             104434a0  ps_merge10 fr2 fr4 fr6
0x00000074             104434a1  ps_merge10. fr2 fr4 fr6
0x00000078             104434e0  ps_merge11 fr2 fr4 fr6
0x0000007c             104434e1  ps_merge11. fr2 fr4 fr6
0x00000080             10602890  ps_mr fr3 fr5
0x00000084             10602891  ps_mr. fr3 fr5
0x00000088             104441b8  ps_msub fr2 fr4 fr6 fr8
0x0000008c             104441b9  ps_msub. fr2 fr4 fr6 fr8
0x00000090             10430172  ps_mul fr2 fr3 fr5
0x00000094             10430173  ps_mul. fr2 fr3 fr5
0x00000098             106401d8  ps_muls0 fr3 fr4 fr7
0x0000009c             106401d9  ps_muls0. fr3 fr4 fr7
0x000000a0             106401da  ps_muls1 fr3 fr4 fr7
0x000000a4             106401db  ps_muls1. fr3 fr4 fr7
0x000000a8             10202910  ps_nabs fr1 fr5
0x000000ac             10202911  ps_nabs. fr1 fr5
0x000000b0             10202850  ps_neg fr1 fr5
0x000000b4             10202851  ps_neg. fr1 fr5
0x000000b8             1023397e  ps_nmadd fr1 fr3 fr5 fr7
0x000000bc             1023397f  ps_nmadd. fr1 fr3 fr5 fr7
0x000000c0             1023397c  ps_nmsub fr1 fr3 fr5 fr7
0x000000c4             1023397d  ps_nmsub. fr1 fr3 fr5 fr7
0x000000c8             11201830  ps_res fr9 fr3
0x000000cc             11201831  ps_res. fr9 fr3
0x000000d0             11201834  ps_rsqrte fr9 fr3
0x000000d4             11201835  ps_rsqrte. fr9 fr3
0x000000d8             102220ee  ps_sel fr1 fr2 fr3 fr4
0x000000dc             102220ef  ps_sel. fr1 fr2 fr3 fr4
0x000000e0             10ab1028  ps_sub fr5 fr11 fr2
0x000000e4             10ab1029  ps_sub. fr5 fr11 fr2
0x000000e8             10455254  ps_sum0 fr2 fr5 fr9 fr10
0x000000ec             10455255  ps_sum0. fr2 fr5 fr9 fr10
0x000000f0             10455256  ps_sum1 fr2 fr5 fr9 fr10
0x000000f4             10455257  ps_sum1. fr2 fr5 fr9 fr10
0x000000f8             10032fec  dcbz_l fr3 fr5
0x000000fc             f3e10028  psq_st fr31 0x29(r1) 0x0
EOF
RUN

NAME=endian tests: arm.v35
FILE=bins/mach0/BatteryLife.arm_64.1
CMDS=<<EOF
e anal.hasnext=1
afr
sn
pdr
EOF
EXPECT=<<EOF
  ; CALL XREF from sym.func.100013adc @ 0x100013e60
  ; CALL XREF from sym.func.100069028 @ 0x10006907c
/ 272: sym.func.100010ffc ();
| ; var int64_t var_10h @ x29-0x10
| ; var int64_t var_bp_8h @ x29-0x8
| ; var int64_t var_0h @ sp+0x0
| ; var int64_t var_8h @ sp+0x8
| ; var int64_t var_sp_10h @ sp+0x10
| ; var int64_t var_18h @ sp+0x18
| 0x100010ffc      fd7bbfa9       stp x29, x30, [sp, -0x10]!
| ; DATA XREFS from sym.func.1000119f0 @ 0x100011b60, 0x100011b88, 0x100011bac
| 0x100011000      fd030091       mov x29, sp
| 0x100011004      ffc300d1       sub sp, sp, 0x30
| 0x100011008      080080d2       movz x8, 0
| 0x10001100c      a0031ff8       stur x0, [var_10h]                   ; [0x10:4]=-1 ; 16
| 0x100011010      e10f00f9       str x1, [sp, 0x18]
| 0x100011014      a0035ff8       ldur x0, [var_10h]
| 0x100011018      1f0008eb       cmp x0, x8
| 0x10001101c      81000054       b.ne 0x10001102c
| ----------- true: 0x10001102c  false: 0x100011020
| 0x100011020      080080d2       movz x8, 0
| 0x100011024      a8831ff8       stur x8, [var_bp_8h]                 ; [0x8:4]=-1 ; 8
| 0x100011028      35000014       b 0x1000110fc
| ----------- true: 0x1000110fc
| 0x10001102c      0100a152       movz w1, 0x800, lsl 16
| 0x100011030      01208072       movk w1, 0x100
| 0x100011034      a0035ff8       ldur x0, [var_10h]
| 0x100011038      fbba0394       bl sym.imp.CFStringGetCStringPtr
| 0x10001103c      080080d2       movz x8, 0
| 0x100011040      01008052       movz w1, 0
| 0x100011044      e88300a9       stp x8, x0, [sp, 8]
| 0x100011048      e00f40f9       ldr x0, [var_18h]                    ; [0x18:4]=-1 ; 24
| 0x10001104c      01000039       strb w1, [x0]
| 0x100011050      e00b40f9       ldr x0, [var_sp_10h]                 ; [0x10:4]=-1 ; 16
| 0x100011054      1f0008eb       cmp x0, x8
| 0x100011058      41000054       b.ne 0x100011060
| ----------- true: 0x100011060  false: 0x10001105c
| 0x10001105c      04000014       b 0x10001106c
| ----------- true: 0x10001106c
| 0x100011060      e80b40f9       ldr x8, [var_sp_10h]                 ; [0x10:4]=-1 ; 16
| 0x100011064      e80700f9       str x8, [sp, 8]
| 0x100011068      23000014       b 0x1000110f4
| ----------- true: 0x1000110f4
| ; CODE XREF from sym.func.100010ffc @ 0x10001105c
| 0x10001106c      a0035ff8       ldur x0, [var_10h]
| 0x100011070      f0ba0394       bl sym.imp.CFStringGetLength
| 0x100011074      0100a152       movz w1, 0x800, lsl 16
| 0x100011078      01208072       movk w1, 0x100
| 0x10001107c      f0ba0394       bl sym.imp.CFStringGetMaximumSizeForEncoding
| 0x100011080      e80340b2       orr x8, xzr, 1
| 0x100011084      e00300f9       str x0, [sp]
| 0x100011088      e00340f9       ldr x0, [sp]
| 0x10001108c      e90340b2       orr x9, xzr, 1
| 0x100011090      0100098b       add x1, x0, x9
| 0x100011094      e00308aa       mov x0, x8
| 0x100011098      fcb90394       bl sym.imp.calloc
| 0x10001109c      080080d2       movz x8, 0
| 0x1000110a0      e00700f9       str x0, [sp, 8]
| 0x1000110a4      e90740f9       ldr x9, [var_8h]                     ; [0x8:4]=-1 ; 8
| 0x1000110a8      3f0108eb       cmp x9, x8
| 0x1000110ac      41000054       b.ne 0x1000110b4
| ----------- true: 0x1000110b4  false: 0x1000110b0
| 0x1000110b0      0e000014       b 0x1000110e8
| ----------- true: 0x1000110e8
| 0x1000110b4      a0035ff8       ldur x0, [var_10h]
| 0x1000110b8      e20740a9       ldp x2, x1, [sp]
| 0x1000110bc      0300a152       movz w3, 0x800, lsl 16
| 0x1000110c0      03208072       movk w3, 0x100
| 0x1000110c4      d5ba0394       bl sym.imp.CFStringGetCString
| 0x1000110c8      001c0013       sxtb w0, w0
| 0x1000110cc      1f000071       cmp w0, 0
| 0x1000110d0      c1000054       b.ne 0x1000110e8
| ----------- true: 0x1000110e8  false: 0x1000110d4
| 0x1000110d4      e00740f9       ldr x0, [var_8h]                     ; [0x8:4]=-1 ; 8
| 0x1000110d8      0dba0394       bl sym.imp.free                      ; void free(void *ptr)
| 0x1000110dc      000080d2       movz x0, 0
| 0x1000110e0      a0831ff8       stur x0, [var_bp_8h]                 ; [0x8:4]=-1 ; 8
| 0x1000110e4      06000014       b 0x1000110fc
| ----------- true: 0x1000110fc
| ; CODE XREF from sym.func.100010ffc @ 0x1000110b0
| 0x1000110e8      e8030032       orr w8, wzr, 1
| 0x1000110ec      e90f40f9       ldr x9, [var_18h]                    ; [0x18:4]=-1 ; 24
| 0x1000110f0      28010039       strb w8, [x9]
| ----------- true: 0x1000110f4
| ; CODE XREF from sym.func.100010ffc @ 0x100011068
| 0x1000110f4      e80740f9       ldr x8, [var_8h]                     ; [0x8:4]=-1 ; 8
| 0x1000110f8      a8831ff8       stur x8, [var_bp_8h]                 ; [0x8:4]=-1 ; 8
| ----------- true: 0x1000110fc
| ; CODE XREFS from sym.func.100010ffc @ 0x100011028, 0x1000110e4
| 0x1000110fc      a0835ff8       ldur x0, [var_bp_8h]
| 0x100011100      bf030091       mov sp, x29
| 0x100011104      fd7bc1a8       ldp x29, x30, [sp], 0x10
\ 0x100011108      c0035fd6       ret

EOF
RUN
